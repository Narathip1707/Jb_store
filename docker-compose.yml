# Docker Compose Configuration
# Warehouse Management System - Complete Development Environment

services:
  # ===========================================
  # DATABASE SERVICES
  # ===========================================
  
  # PostgreSQL Primary Database
  postgres:
    image: postgres:15-alpine
    container_name: wms_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: warehouse_db
      POSTGRES_USER: warehouse_user
      POSTGRES_PASSWORD: warehouse_pass123
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seed-data.sql:/docker-entrypoint-initdb.d/02-seed-data.sql
    networks:
      - wms_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U warehouse_user -d warehouse_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: wms_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - wms_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # BACKEND SERVICES
  # ===========================================

  # Backend API Server (Node.js example)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: wms_backend
    restart: unless-stopped
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: warehouse_db
      DB_USER: warehouse_user
      DB_PASSWORD: warehouse_pass123
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # Application Configuration
      NODE_ENV: development
      PORT: 3000
      API_VERSION: v1
      
      # JWT Configuration
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
      
      # File Upload
      MAX_FILE_SIZE: 10485760 # 10MB
      UPLOAD_PATH: /app/uploads
      
      # Email Configuration (optional)
      SMTP_HOST: mailhog
      SMTP_PORT: 1025
      SMTP_USER: ""
      SMTP_PASSWORD: ""
      
      # Logging
      LOG_LEVEL: debug
      
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
      - /app/node_modules # Prevent host node_modules from overriding container's
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - wms_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # FRONTEND SERVICES
  # ===========================================

  # Frontend Web Application (React/Vue/Angular example)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: wms_frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost:3000/api/v1
      - REACT_APP_WS_URL=ws://localhost:3000
      - REACT_APP_ENV=development
      - GENERATE_SOURCEMAP=true
    ports:
      - "3001:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - wms_network
    stdin_open: true
    tty: true

  # ===========================================
  # DEVELOPMENT TOOLS
  # ===========================================

  # MailHog (Email Testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: wms_mailhog
    restart: unless-stopped
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    networks:
      - wms_network

  # pgAdmin (Database Management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: wms_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@warehouse.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_DISABLE_POSTFIX: true
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - wms_network

  # Redis Commander (Redis Management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: wms_redis_commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - wms_network

  # ===========================================
  # MONITORING & LOGGING (Optional)
  # ===========================================

  # Nginx Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: wms_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - wms_network

# ===========================================
# VOLUMES (Persistent Data)
# ===========================================
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker/volumes/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker/volumes/redis
  
  pgadmin_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker/volumes/pgadmin
  
  backend_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker/volumes/uploads
  
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker/volumes/nginx/logs

# ===========================================
# NETWORKS
# ===========================================
networks:
  wms_network:
    driver: bridge